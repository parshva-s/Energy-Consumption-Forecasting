# -*- coding: utf-8 -*-
"""Data Visualization with Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cLfqz2tkoOFrpuM4BUbFOJxJwoDXW8ps

# **Forecasting Energy Consumption**


---


The goal of this project is to use historical energy production and consumption data to model what they would look like in the future. The modelling method used applying multiple linear regression to forecast what the consumption would look like.

Imports and libraries
"""

# import to use files directly from drive
from google.colab import drive
# data and visualization imports
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
# machine learning imports
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

"""Inititalize data from csv file in local directory or the drive"""

# if it is in drive
drive.mount('/content/drive/')

# if it is in local directory
data = pd.read_csv("/content/Data/MER_T01_01.csv")

"""Initialize electricty production and consumption data"""

data['Value'] = data['Value'].apply(lambda x: x*1.055) # converting energy values from British Thermal Units to Joules
totalenergyproduction = data.loc[(data['Description'] == "Total Primary Energy Production") & (data["YYYYMM"] >= 197301)] # production data
totalenergyconsumption = data.loc[(data['Description'] == "Total Primary Energy Consumption") & (data["YYYYMM"] >= 197301)] #consumption data

"""Plotting the historical values of electricity consumption and production"""

#energy values
prod = totalenergyproduction.Value
cons = totalenergyconsumption.Value

#formatting dates for x-axis of graph
totalenergyconsumption['YYYYMM'] = pd.to_datetime(totalenergyconsumption['YYYYMM'], format='%Y%m', errors='coerce').dropna()
dates = totalenergyconsumption.YYYYMM
dates

# actual plots for production and consumption
plt.plot(dates,cons,"o-")
plt.plot(dates,prod,"o-")

# plot and figure handler
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=900))
plt.ylabel("Total Energy (EJ)")
plt.xlabel("Date (YYYY-MM)")
plt.gcf().autofmt_xdate()
plt.rcParams["figure.figsize"] = (30,9)
plt.legend(["Electricity Consumption", "Electricity Production"])
plt.rcParams.update({'font.size': 18})

plt.show()

# creating input for output
totalenergyconsumption["LastMonth"] = totalenergyconsumption["Value"].shift(+1)
totalenergyconsumption["Last4Months"] = totalenergyconsumption["Value"].shift(+4)
totalenergyconsumption["LastYear"] = totalenergyconsumption["Value"].shift(+12)
totalenergyconsumption = totalenergyconsumption.dropna()

x1,x2,x3,y = totalenergyconsumption['LastMonth'], totalenergyconsumption['Last4Months'], \
    totalenergyconsumption['LastYear'], totalenergyconsumption['Value']
x1,x2,x3,y = np.array(x1), np.array(x2), np.array(x3), np.array(y)
x1,x2,x3,y = x1.reshape(-1,1), x2.reshape(-1,1), x3.reshape(-1,1), y.reshape(-1,1)
finalconsumption = np.concatenate((x1,x2,x3),axis=1)

x_train, x_test, y_train, y_test = finalconsumption[:-30], finalconsumption[-30:], y[:-30], y[-30:]
lin_model = LinearRegression()
lin_model.fit(x_train, y_train)
lin_prediction = lin_model.predict(x_test)

plt.plot(y_test, label = "Actual")
plt.plot(lin_prediction, label = "Linear Regression")
plt.legend()
plt.xlabel("Months")
plt.ylabel("Total Energy (EJ)")

plt.show()